{"version":3,"names":[],"mappings":"","sources":["js/router.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\nconst VueRouter = window.vueRouter;\nconst { httpVueLoader } = window;\n\nif (!window.router) {\n    const loginComponent = httpVueLoader('js/templates/login.vue');\n    const configComponent = httpVueLoader('js/templates/config.vue');\n    const addShowsComponent = httpVueLoader('js/templates/add-shows.vue');\n    const addRecommendedComponent = httpVueLoader('js/templates/add-recommended.vue');\n    const notFoundComponent = httpVueLoader('js/templates/http/404.vue');\n\n    const homeRoutes = {\n        path: '/home',\n        children: [{\n            path: '',\n            name: 'home',\n            meta: {\n                title: 'Home',\n                header: 'Show List'\n            }\n        }, {\n            path: 'editShow',\n            name: 'editShow'\n        }, {\n            path: 'displayShow',\n            name: 'displayShow'\n        }]\n    };\n\n    const configRoutes = {\n        path: '/config',\n        component: { template: '<router-view/>' },\n        children: [{\n            path: '',\n            name: 'config',\n            meta: {\n                title: 'Help & Info',\n                header: 'Medusa Configuration'\n            },\n            component: configComponent\n        }, {\n            path: 'anime',\n            name: 'configAnime',\n            meta: {\n                title: 'Config - Anime',\n                header: 'Anime'\n            }\n        }, {\n            path: 'backuprestore',\n            name: 'configBackupRestore',\n            meta: {\n                title: 'Config - Backup/Restore',\n                header: 'Backup/Restore'\n            }\n        }, {\n            path: 'general',\n            name: 'configGeneral',\n            meta: {\n                title: 'Config - General',\n                header: 'General Configuration'\n            }\n        }, {\n            path: 'notifications',\n            name: 'configNotifications',\n            meta: {\n                title: 'Config - Notifications',\n                header: 'Notifications'\n            }\n        }, {\n            path: 'postProcessing',\n            name: 'configPostProcessing',\n            meta: {\n                title: 'Config - Post Processing',\n                header: 'Post Processing'\n            }\n        }, {\n            path: 'providers',\n            name: 'configSearchProviders',\n            meta: {\n                title: 'Config - Providers',\n                header: 'Search Providers'\n            }\n        }, {\n            path: 'search',\n            name: 'configSearchSettings',\n            meta: {\n                title: 'Config - Episode Search',\n                header: 'Search Settings'\n            }\n        }, {\n            path: 'subtitles',\n            name: 'configSubtitles',\n            meta: {\n                title: 'Config - Subtitles',\n                header: 'Subtitles'\n            }\n        }]\n    };\n\n    const addShowRoutes = {\n        path: '/addShows',\n        component: { template: '<router-view/>' },\n        children: [{\n            path: '',\n            name: 'addShows',\n            meta: {\n                title: 'Add Shows',\n                header: 'Add Shows'\n            },\n            component: addShowsComponent\n        }, {\n            path: 'addExistingShows',\n            name: 'addExistingShows',\n            meta: {\n                title: 'Add Existing Shows',\n                header: 'Add Existing Shows'\n            }\n        }, {\n            path: 'newShow',\n            name: 'addNewShow',\n            meta: {\n                title: 'Add New Show',\n                header: 'Add New Show'\n            }\n        }]\n    };\n\n    const loginRoute = {\n        path: '/login',\n        name: 'login',\n        meta: {\n            title: 'Login'\n        },\n        component: loginComponent\n    };\n\n    const addRecommendedRoute = {\n        path: '/addRecommended',\n        name: 'addRecommended',\n        meta: {\n            title: 'Add Recommended Shows',\n            header: 'Add Recommended Shows'\n        },\n        component: addRecommendedComponent\n    };\n\n    const scheduleRoute = {\n        path: '/schedule',\n        name: 'schedule',\n        meta: {\n            title: 'Schedule',\n            header: 'Schedule'\n        }\n    };\n\n    const historyRoute = {\n        path: '/history',\n        name: 'history',\n        meta: {\n            title: 'History',\n            header: 'History'\n        }\n    };\n\n    const manageRoutes = {\n        path: '/manage',\n        component: { template: '<router-view/>' },\n        children: [{\n            path: '',\n            name: 'manage',\n            meta: {\n                title: 'Mass Update',\n                header: 'Mass Update'\n            }\n        }, {\n            path: 'backlogOverview',\n            name: 'manageBacklogOverview',\n            meta: {\n                title: 'Backlog Overview',\n                header: 'Backlog Overview'\n            }\n        }, {\n            path: 'episodeStatuses',\n            name: 'manageEpisodeOverview',\n            meta: {\n                title: 'Episode Overview',\n                header: 'Episode Overview'\n            }\n        }, {\n            path: 'failedDownloads',\n            name: 'manageFailedDownloads',\n            meta: {\n                title: 'Failed Downloads',\n                header: 'Failed Downlaods'\n            }\n        }, {\n            path: 'manageSearches',\n            name: 'manageManageSearches',\n            meta: {\n                title: 'Manage Searches',\n                header: 'Manage Searches'\n            }\n        }, {\n            path: 'massEdit',\n            name: 'manageMassEdit',\n            meta: {\n                title: 'Mass Edit'\n            }\n        }, {\n            path: 'subtitleMissed',\n            name: 'manageSubtitleMissed',\n            meta: {\n                title: 'Missing Subtitles',\n                header: 'Missing Subtitles'\n            }\n        }, {\n            path: 'subtitleMissedPP',\n            name: 'manageSubtitleMissedPP',\n            meta: {\n                title: 'Missing Subtitles in Post-Process folder',\n                header: 'Missing Subtitles in Post-Process folder'\n            }\n        }]\n    };\n\n    const notFoundRoutes = {\n        path: '/not-found',\n        name: 'not-found',\n        meta: {\n            title: '404',\n            header: '404 - page not found'\n        },\n        component: notFoundComponent\n        // @NOTE: Redirect can only be added once all routes are vue\n        // }, {\n        //     path: '*',\n        //     redirect: '/not-found'\n    };\n\n    const routes = [homeRoutes, configRoutes, addShowRoutes, loginRoute, addRecommendedRoute, scheduleRoute, historyRoute, manageRoutes, notFoundRoutes];\n\n    const router = new VueRouter({\n        base: document.body.getAttribute('web-root') + '/',\n        mode: 'history',\n        routes\n    });\n\n    router.beforeEach((to, from, next) => {\n        const { meta } = to;\n        const { title } = meta;\n\n        // If there's no title then it's not a .vue route\n        // or it's handling its own title\n        if (title) {\n            document.title = `${title} | Medusa`;\n        }\n\n        // Always call next otherwise the <router-view> will be empty\n        next();\n    });\n\n    window.router = router;\n}\n\n},{}]},{},[1]);\n"],"file":"router.js"}